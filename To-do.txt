////////////////////////////////////////////////////////////////////////////////////////////////////
COMPLETED
	Implemented these function for the mediator in our concrete unit classes 
	event()
	act()

////////////////////////////////////////////////////////////////////////////////////////////////////
TODO
	tell the observer when the pc turn computer turn

	We need to put output in event() act()

	AttackParty notify function needs atttention

///////////////////////////////////////////////////////////////////////////////////////////////////
NOTES - FROM KYLE
	Going to work on adapter and facade pattern 

CHANGING TERMINAL COLOURS
	system("Color D4");
		std::cout << "\t\t\t    Hello World" << std::endl;
	system("Color E5");
///////////////////////////////////////////////////////////////////////////////////////////////////
NOTES - FROM RITZ

///////////////////////////////////////////////////////////////////////////////////////////////////
TASK
	The Adapter and Facade pattern should
	be implemented in such as way to allow for adaptation between the classes and the Observer and Mediator
	patterns. The Facade is used to give the impression that the classes offer a simple method of taking damage,
	thereby hiding the Rock, Paper, Scissors complexity (i.e. you will have one function to allow for damage to
	be taken by all units).
	You will need to allow for the map to be updated after each turn as the units move through the map.
	• The Observer and Mediator patterns will be used to organise the game play into a turn based playing
	system.
	• The Adapter and Facade patterns will be used as a layer of abstraction to allow for a simplified interface
	to be used by the Observer and mediator classes.